//#define ArduinoJsonDebug
#define OpenHABDebug
#include <pgmspace.h>

// WiFi parameters are inlcuded from secret.h which is not posted on GitHub
// Edit include/secret_example.h and rename to include/secret.h
#include "secret.h"
#include "OpenHAB.h"

#define LISTEN_PORT 8080              // The port to listen for incoming TCP connections
OpenHab OpenHabServer(LISTEN_PORT);   // Create an instance of the OpenHAB server

// Global parameters for runtime generated by GenConfig
#include "main.h"

// For every item that is changed by the end user (UI), this function will be called
void handleStateChange(uint8_t itemIdx) {
  OpenHab::Item item = getItem(itemIdx);	
  Serial.printf_P(PSTR("handleStateChange: Item %s changed state to \"%s\"\n"), item.name, itemStates[itemIdx]);
}

void setup(void) {
  Serial.begin(115200);
  while (!Serial) {} // Wait for serial port initialization
  Serial.println();  //Clear some garbage that may be printed to the serial console
  //ets_intr_lock(); // all interupt off
  //wdt_disable();
  //ESP.wdtEnable(65535);
  delay(500);
  Serial.printf_P(PSTR("free heap memory: %d\n"), ESP.getFreeHeap());
  
  if (!OpenHabServer.Init(ssid, softAPssid, passphrase, allowedMAC))
    DbgPrintln(F("Server init failed"));
  else { 
    OpenHabServer.StartServer();	// Start the server
    OpenHabServer.stateChangeCallback(handleStateChange); // Register callback for state changes
    DbgPrintln(F("HTTP server started"));
  }
}

void loop() {  // Handle REST calls and state changed callbacks
  OpenHabServer.HandleClient();
}
